HW_2 Postman


http://162.55.220.72:5005/first
1. Отправить запрос. 
 get http://162.55.220.72:5005/first. URL+endPoint —> Save —> Send

2. Статус код 200
 tests —> status code: code is 200
3. Проверить, что в body приходит правильный string.

pm.test("Body is correct", function () {
    pm.response.to.have.body("This is the first responce from server!");
});

Save —> Send

PASS
Body is correct


http://162.55.220.72:5005/user_info_3
1. Отправить запрос. 
post http://162.55.220.72:5005/user_info_3 URL+endPoint —> Save —> Send

2. Статус код 200
tests —> status code: code is 200

3. Спарсить response body в json.

var resp = pm.response.json();

4. Проверить, что name в ответе равно name s request (name вбить руками.)

Body —> form-data —> name Kate
age 25
salary 1000

pm.test("Name", function () {
    pm.expect(resp.name).to.eql("Kate");
});

PASS
Name

5. Проверить, что age в ответе равно age s request (age вбить руками.)

pm.test("Age", function () {
    pm.expect(resp.age).to.eql("25");
});

PASS
Age

6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)

pm.test("Salary", function () {
    pm.expect(resp.salary).to.eql(1000);
});

PASS
Salary

7. Спарсить request.

var req = request.date

8. Проверить, что name в ответе равно name s request (name забрать из request.)

pm.test("Checking name", function () {
    pm.expect(req.name).to.eql(resp.name);

9. Проверить, что age в ответе равно age s request (age забрать из request.)

pm.test("Checking age", function () {
    pm.expect(req.age).to.eql(resp.age);
});


10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)

pm.test("Checking salary", function () {
    pm.expect(Number (req.salary)).to.eql(resp.salary);
});

11. Вывести в консоль параметр family из response.

console.log (resp.family)

12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)

pm.test("U_salary_1_5 year in the response is equal salary *4 from the request", function () {
    pm.expect(resp.family. u_salary_1_5_year).to.eql(req.salary * 4);
});


http://162.55.220.72:5005/object_info_3
1. Отправить запрос.

get http://162.55.220.72:5005/object_info_3  URL+endPoint —> Save —> Send

2. Статус код 200

pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

3. Спарсить response body в json.

var responseJSON = pm.response.json();

4. Спарсить request.

var requestJSON = pm.request.url.query.toObject()


5. Проверить, что name в ответе равно name s request (name забрать из request.)

pm.test("name_response= name_request", function () {
    pm.expect(responseJSON.name).to.eql(requestJSON.name);
});

6. Проверить, что age в ответе равно age s request (age забрать из request.)

pm.test("name_response= name_request", function () {
    pm.expect(responseJSON.age).to.eql(requestJSON.age);
});

7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)

pm.test("salary_response= salary_request", function () {
    pm.expect(responseJSON.salary).to.eql(+requestJSON.salary);
});

8. Вывести в консоль параметр family из response.

console.log (responseJSON.family)

9. Проверить, что у параметра dog есть параметры name.

pm.test("dog has name", function () {
    pm.expect(responseJSON.family.pets.dog).to.have.any.keys ("name");
});

10. Проверить, что у параметра dog есть параметры age.
pm.test("dog has age", function () {
    pm.expect(responseJSON.family.pets.dog).to.have.any.keys ("age");
});

11. Проверить, что параметр name имеет значение Luky.

pm.test("the name parameter is Luky", function () {
    pm.expect(responseJSON.family.pets.dog.name).to.eql("Luky");
});

12. Проверить, что параметр age имеет значение 4.

pm.test("the name parameter is 4", function () {
    pm.expect(responseJSON.family.pets.dog.age).to.eql(4);
});



http://162.55.220.72:5005/object_info_4
1. Отправить запрос.

 get http://162.55.220.72:5005/object_info_4 URL+endPoint —> Save —> Send
2. Статус код 200
tests —> status code: code is 200

3. Спарсить response body в json.
var responseJSON = pm.response.json();

4. Спарсить request.
var requestJSON = pm.request.url.query.toObject()

5. Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test("name_response= name_request", function () {
    pm.expect(responseJSON.name).to.eql(requestJSON.name);

6. Проверить, что age в ответе равно age из request (age забрать из request.)

pm.test("age_response= age_request", function () {
    pm.expect(responseJSON.age).to.eql(18);
});

7. Вывести в консоль параметр salary из request.
console.log (requestJSON.salary)

8. Вывести в консоль параметр salary из response.
console.log (responseJSON.salary)

9. Вывести в консоль 0-й элемент параметра salary из response.
console.log (responseJSON.salary[0])

10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.
console.log (responseJSON.salary[1])

11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.
console.log (responseJSON.salary[2])

12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)

pm.test("the salary[0] parameter is equal the salary from the request", function () {
    pm.expect(responseJSON.salary[0]).to.eql(Number(requestJSON.salary));
});
13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)
pm.test("the salary[1] = the salary from the request *2 ", function () {
    pm.expect(Number(responseJSON.salary[1])).to.eql(requestJSON.salary * 2);
});
14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)

pm.test("the salary[2] = the salary from the request *3 ", function () {
    pm.expect(Number(responseJSON.salary[2])).to.eql(requestJSON.salary * 3);
});

15. Создать в окружении переменную name

16. Создать в окружении переменную age

17. Создать в окружении переменную salary

18. Передать в окружение переменную name

pm.environment.set("Name", "Kate");

19. Передать в окружение переменную age

pm.environment.set("Age", "25");

20. Передать в окружение переменную salary

pm.environment.set("Salary", "600");

21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.

var count = 0
while (count < Object. keys (responseJSON.salary). length) {
    console.log (responseJSON.salary [count]) ;
    count +- 1 ;

}